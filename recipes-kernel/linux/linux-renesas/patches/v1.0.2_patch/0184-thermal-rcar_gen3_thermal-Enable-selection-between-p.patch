From 5f0e2c840d2e03a631821657ca33e5cf96d0387e Mon Sep 17 00:00:00 2001
From: "Loc Phuoc Pham.Lam" <loc.lam.px@renesas.com>
Date: Tue, 28 May 2019 15:30:46 +0700
Subject: [PATCH 184/248] thermal: rcar_gen3_thermal: Enable selection between
 polling/interrupt mode

In kernel v4.9, both interrupt mode and polling mode
are supported for thermal driver.
When upgrading to v4.14, the upstream code is just only
support for interrupt mode.

This patch supplements polling mode implementation
into upstream code.

Signed-off-by: Hien Dang <hien.dang.eb@renesas.com>
Signed-off-by: Dien Pham <dien.pham.ry@renesas.com>
Signed-off-by: Loc Phuoc Pham.Lam <loc.lam.px@renesas.com>
---
 drivers/thermal/rcar_gen3_thermal.c | 24 +++++++++++++++++++++---
 1 file changed, 21 insertions(+), 3 deletions(-)

diff --git a/drivers/thermal/rcar_gen3_thermal.c b/drivers/thermal/rcar_gen3_thermal.c
index 4648d94..2ecf24b 100644
--- a/drivers/thermal/rcar_gen3_thermal.c
+++ b/drivers/thermal/rcar_gen3_thermal.c
@@ -81,6 +81,7 @@ struct rcar_gen3_thermal_priv {
 	unsigned int num_tscs;
 	spinlock_t lock; /* Protect interrupts on and off */
 	void (*thermal_init)(struct rcar_gen3_thermal_tsc *tsc);
+	bool irq_cap;
 };
 
 static inline u32 rcar_gen3_thermal_read(struct rcar_gen3_thermal_tsc *tsc,
@@ -353,6 +354,8 @@ static int rcar_gen3_thermal_probe(struct platform_device *pdev)
 	struct thermal_zone_device *zone;
 	int ret, irq, i;
 	char *irqname;
+	struct device_node *tz_nd;
+	int idle;
 
 	/* default values if FUSEs are missing */
 	/* TODO: Read values from hardware on supported platforms */
@@ -395,6 +398,16 @@ static int rcar_gen3_thermal_probe(struct platform_device *pdev)
 						IRQF_SHARED, irqname, priv);
 		if (ret)
 			return ret;
+
+		priv->irq_cap = 1;
+	}
+
+	for_each_node_with_property(tz_nd, "polling-delay") {
+		of_property_read_u32(tz_nd, "polling-delay", &idle);
+		if (idle > 0) {
+			priv->irq_cap = 0;
+			break;
+		}
 	}
 
 	pm_runtime_enable(dev);
@@ -423,7 +436,9 @@ static int rcar_gen3_thermal_probe(struct platform_device *pdev)
 
 		priv->thermal_init(tsc);
 		rcar_gen3_thermal_calc_coefs(&tsc->coef, ptat, thcode[i]);
-		rcar_gen3_thermal_set_irq_temp(tsc);
+
+		if (priv->irq_cap)
+			rcar_gen3_thermal_set_irq_temp(tsc);
 
 		zone = devm_thermal_zone_of_sensor_register(dev, i, tsc,
 							    &rcar_gen3_tz_of_ops);
@@ -476,10 +491,13 @@ static int __maybe_unused rcar_gen3_thermal_resume(struct device *dev)
 		struct rcar_gen3_thermal_tsc *tsc = priv->tscs[i];
 
 		priv->thermal_init(tsc);
-		rcar_gen3_thermal_set_irq_temp(tsc);
+		if (priv->irq_cap)
+			rcar_gen3_thermal_set_irq_temp(tsc);
 	}
 
-	rcar_thermal_irq_set(priv, true);
+
+	if (priv->irq_cap)
+		rcar_thermal_irq_set(priv, true);
 
 	return 0;
 }
-- 
2.7.4

