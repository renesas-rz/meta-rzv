From a8b9a7e8f678c912019d1ab29527b1dc04e37b0c Mon Sep 17 00:00:00 2001
From: Hien Huynh <hien.huynh.px@renesas.com>
Date: Tue, 14 Jul 2020 20:24:18 +0700
Subject: [PATCH 352/458] signal: Prevent double-free of user struct

While running sigwaittest: sigwaittest -t -a -p90 -l1000000,
a warning is triggered:
	free_uid+0xac/0xc0
	collect_signal+0x1b4/0x1c0
	dequeue_signal+0x80/0x1e0
	do_sigtimedwait+0x1cc/0x238
	__se_sys_rt_sigtimedwait+0x90/0x180
	__arm64_sys_rt_sigtimedwait+0x18/0x20
	el0_svc_common+0x6c/0x180
	el0_svc_handler+0x24/0x88
	el0_svc+0x8/0x780
	refcount_t: underflow; use-after-free.

Refer mailing list: https://lkml.org/lkml/2020/4/7/232 with detail:

The way user struct reference counting works changed significantly with,
<797479da0ae9cf7c45d0e97c0258622b4325a919>
("signal: avoid double atomic counter increments for user accounting")
Now user structs are only freed once the last pending signal is
dequeued. Make sigqueue_free_current() follow this new convention to
avoid freeing the user struct multiple times and triggering this
warning:
 refcount_t: underflow; use-after-free.
 WARNING: CPU: 0 PID: 6794 at lib/refcount.c:288 refcount_dec_not_one+0x45/0x50
 Call Trace:
  refcount_dec_and_lock_irqsave+0x16/0x60
  free_uid+0x31/0xa0
  ? schedule_hrtimeout_range_clock+0x104/0x110
  __dequeue_signal+0x17c/0x190
  dequeue_signal+0x5a/0x1b0
  do_sigtimedwait+0x208/0x250
  __x64_sys_rt_sigtimedwait+0x6f/0xd0
  do_syscall_64+0x72/0x200
  entry_SYSCALL_64_after_hwframe+0x49/0xbe

Signed-off-by: Matt Fleming <matt@codeblueprint.co.uk>
Reported-by: Daniel Wagner <wagi@monom.org>
Signed-off-by: Hien Huynh <hien.huynh.px@renesas.com>
---
 kernel/signal.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/kernel/signal.c b/kernel/signal.c
index 4574899..05c9b5a 100644
--- a/kernel/signal.c
+++ b/kernel/signal.c
@@ -488,8 +488,8 @@ static void sigqueue_free_current(struct sigqueue *q)
 
 	up = q->user;
 	if (rt_prio(current->normal_prio) && !put_task_cache(current, q)) {
-		atomic_dec(&up->sigpending);
-		free_uid(up);
+		if (atomic_dec_and_test(&up->sigpending))
+			free_uid(up);
 	} else
 		  __sigqueue_free(q);
 }
-- 
2.7.4

