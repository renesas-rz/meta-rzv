From 6f9007169adfcd88a9719279c4ee0a732ae34bf1 Mon Sep 17 00:00:00 2001
From: Loc Vu <loc.vu.zn@renesas.com>
Date: Thu, 11 Jun 2020 14:48:05 +0700
Subject: [PATCH 330/458] mmc: renesas_sdhi_core: Add adjust HS400 offset by
 manual calibration mode

Since Gen3 SDHI/RZG2 has an internal DS signal AC-spec violation in HS400,
CRC-error may occur in read command. It is only HS400 mode.
This phoenomenon occurs at low/high temperature.
(R-Car Gen3 HW restriction No.109)

To fix this, after completion of HS400 tuning, enable manual calibration.
However, Rcar-Gen3 M3 Ver.1.2 or earlier and H3 1.x does not support HS400.
These SoC forcibly use HS200 mode by SoC attribute.

[Flow of Manual Calibration mode]
1) Complete tuning in HS400 mode.
2) Switch card to HS400
3) Set HS400 timing (SDHI transitions to HS400)
4) Send command (CMD13)
5) Enable manual calibration

Before enabling manual calibration mode, CMD13 command must be issued.
In card initialization processing, CMD13 is executed at the end of
select HS400.
So, when CMD13 request completes, enables manual mode.

[Flow of enable manual calibration]
1) Disable register write protect
2) Read current calibration code and adjust it
3) Set manual mode with new calibration code
4) Set offset

[Flow of disable manual calibration]
1) Disable register write protect
2) Clear manual mode
3) Clear offset

Parameters for adjust HS400 are automatically set according to SoC.
For customization, these parameters can be overwritten by device tree.
Please refer to the latest HW manual for parameter for each product.

ex)
adjust_hs400_offset = <0>;
adjust_hs400_calibrate = <2>;

This patch also improves the data structure of quirks like upstream.
commit 164691aae88d ("mmc: renesas_sdhi: handle 4tap hs400
mode quirk based on SoC revision")

Currently, the following bits are already used.
Therefore, free bits are only bit[15:4].

bit[3:0] ... flags
bit[31:16] ... HS400 manual calibration parameter

By changing to renesas_sdhi_quirks, readability and
capacity can be improved.

Reference path:
- Repository: https://github.com/renesas-rcar/linux-bsp
- Branch: v4.14.75-ltsi/rcar-3.9.8
- Commit: <1f84d574931b1319ebc1229678816338578f2d1e>
	  <8ce90dc51484a7d4f98c2a5f0aa4085e1e33fd85>

Signed-off-by: Loc Vu <loc.vu.zn@renesas.com>
---
 drivers/mmc/host/renesas_sdhi.h      |   8 ++
 drivers/mmc/host/renesas_sdhi_core.c | 226 ++++++++++++++++++++++++++++++++++-
 drivers/mmc/host/tmio_mmc.h          |   7 --
 3 files changed, 231 insertions(+), 10 deletions(-)

diff --git a/drivers/mmc/host/renesas_sdhi.h b/drivers/mmc/host/renesas_sdhi.h
index c23b78a..4503662 100644
--- a/drivers/mmc/host/renesas_sdhi.h
+++ b/drivers/mmc/host/renesas_sdhi.h
@@ -38,6 +38,11 @@ struct renesas_sdhi_of_data {
 
 struct renesas_sdhi_quirks {
 	bool hs400_4taps;
+	bool hs400_disabled;
+	bool dtranend1_bit17;
+	bool hs400_manual_calib;
+	u32 hs400_offset;
+	u32 hs400_calib;
 };
 
 struct tmio_mmc_dma {
@@ -59,6 +64,9 @@ struct renesas_sdhi {
 	void __iomem *scc_ctl;
 	u32 scc_tappos;
 	u32 scc_tappos_hs400;
+	bool dtranend1_bit17;
+	u32 adjust_hs400_offset;
+	u32 adjust_hs400_calibrate;
 };
 
 #define host_to_priv(host) \
diff --git a/drivers/mmc/host/renesas_sdhi_core.c b/drivers/mmc/host/renesas_sdhi_core.c
index 594ee22..247e45c 100644
--- a/drivers/mmc/host/renesas_sdhi_core.c
+++ b/drivers/mmc/host/renesas_sdhi_core.c
@@ -214,6 +214,11 @@ static int renesas_sdhi_start_signal_voltage_switch(struct mmc_host *mmc,
 #define SH_MOBILE_SDHI_SCC_RVSCNTL	0x008
 #define SH_MOBILE_SDHI_SCC_RVSREQ	0x00A
 #define SH_MOBILE_SDHI_SCC_TMPPORT2	0x00E
+#define SH_MOBILE_SDHI_SCC_TMPPORT3	0x014
+#define SH_MOBILE_SDHI_SCC_TMPPORT4	0x016
+#define SH_MOBILE_SDHI_SCC_TMPPORT5	0x018
+#define SH_MOBILE_SDHI_SCC_TMPPORT6	0x01A
+#define SH_MOBILE_SDHI_SCC_TMPPORT7	0x01C
 
 /* Definitions for values the SH_MOBILE_SDHI_SCC_DTCNTL register */
 #define SH_MOBILE_SDHI_SCC_DTCNTL_TAPEN		BIT(0)
@@ -230,6 +235,26 @@ static int renesas_sdhi_start_signal_voltage_switch(struct mmc_host *mmc,
 #define SH_MOBILE_SDHI_SCC_TMPPORT2_HS400OSEL	BIT(4)
 #define SH_MOBILE_SDHI_SCC_TMPPORT2_HS400EN	BIT(31)
 
+/* Definitions for values the SH_MOBILE_SDHI_SCC_TMPPORT3 register */
+#define SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_0	3
+#define SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_1	2
+#define SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_2	1
+#define SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_3	0
+#define SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_MASK		0x3
+
+/* Definitions for values the SH_MOBILE_SDHI_SCC_TMPPORT4 register */
+#define SH_MOBILE_SDHI_SCC_TMPPORT4_DLL_ACC_START	BIT(0)
+
+/* Definitions for values the SH_MOBILE_SDHI_SCC_TMPPORT5 register */
+#define SH_MOBILE_SDHI_SCC_TMPPORT5_DLL_RW_SEL_R	BIT(8)
+#define SH_MOBILE_SDHI_SCC_TMPPORT5_DLL_RW_SEL_W	(0 << 8)
+#define SH_MOBILE_SDHI_SCC_TMPPORT5_DLL_ADR_MASK	0x3F
+
+/* Definitions for values the SH_MOBILE_SDHI_SCC register */
+#define SH_MOBILE_SDHI_SCC_TMPPORT_DISABLE_WP_CODE	0xa5000000
+#define SH_MOBILE_SDHI_SCC_TMPPORT_CALIB_CODE_MASK	0x1f
+#define SH_MOBILE_SDHI_SCC_TMPPORT_MANUAL_MODE		BIT(7)
+
 static inline u32 sd_scc_read32(struct tmio_mmc_host *host,
 				struct renesas_sdhi *priv, int addr)
 {
@@ -368,6 +393,8 @@ static void renesas_sdhi_reset_hs400_mode(struct tmio_mmc_host *host,
 		       ~(SH_MOBILE_SDHI_SCC_TMPPORT2_HS400EN |
 			 SH_MOBILE_SDHI_SCC_TMPPORT2_HS400OSEL) &
 			sd_scc_read32(host, priv, SH_MOBILE_SDHI_SCC_TMPPORT2));
+	if (host->adjust_hs400_mode_disable)
+		host->adjust_hs400_mode_disable(host->mmc);
 
 	sd_ctrl_write16(host, CTL_SD_CARD_CLK_CTL, CLK_CTL_SCLKEN |
 			sd_ctrl_read16(host, CTL_SD_CARD_CLK_CTL));
@@ -376,8 +403,94 @@ static void renesas_sdhi_reset_hs400_mode(struct tmio_mmc_host *host,
 static void renesas_sdhi_prepare_hs400_tuning(struct tmio_mmc_host *host)
 {
 	renesas_sdhi_reset_hs400_mode(host, host_to_priv(host));
+	/* execute adjust hs400 offset after setting to HS400 mode */
+	host->needs_adjust_hs400 = true;
+}
+
+static u32 sd_scc_tmpport_read32(struct tmio_mmc_host *host,
+				 struct renesas_sdhi *priv, u32 addr)
+{
+	/* read mode */
+	sd_scc_write32(host, priv, SH_MOBILE_SDHI_SCC_TMPPORT5,
+		       SH_MOBILE_SDHI_SCC_TMPPORT5_DLL_RW_SEL_R |
+		       (SH_MOBILE_SDHI_SCC_TMPPORT5_DLL_ADR_MASK & addr));
+
+	/* access start and stop */
+	sd_scc_write32(host, priv, SH_MOBILE_SDHI_SCC_TMPPORT4,
+		       SH_MOBILE_SDHI_SCC_TMPPORT4_DLL_ACC_START);
+	sd_scc_write32(host, priv, SH_MOBILE_SDHI_SCC_TMPPORT4, 0);
+
+	return sd_scc_read32(host, priv, SH_MOBILE_SDHI_SCC_TMPPORT7);
+}
+
+static void sd_scc_tmpport_write32(struct tmio_mmc_host *host,
+				   struct renesas_sdhi *priv, u32 addr, u32 val)
+{
+	/* write mode */
+	sd_scc_write32(host, priv, SH_MOBILE_SDHI_SCC_TMPPORT5,
+		       SH_MOBILE_SDHI_SCC_TMPPORT5_DLL_RW_SEL_W |
+		       (SH_MOBILE_SDHI_SCC_TMPPORT5_DLL_ADR_MASK & addr));
+
+	sd_scc_write32(host, priv, SH_MOBILE_SDHI_SCC_TMPPORT6, val);
+
+	/* access start and stop */
+	sd_scc_write32(host, priv, SH_MOBILE_SDHI_SCC_TMPPORT4,
+		       SH_MOBILE_SDHI_SCC_TMPPORT4_DLL_ACC_START);
+	sd_scc_write32(host, priv, SH_MOBILE_SDHI_SCC_TMPPORT4, 0);
 }
 
+static void renesas_sdhi_adjust_hs400_mode_enable(struct mmc_host *mmc)
+{
+	struct tmio_mmc_host *host = mmc_priv(mmc);
+	struct renesas_sdhi *priv = host_to_priv(host);
+	u32 calib_code;
+
+	/* Enabled Manual adjust HS400 mode
+	 *
+	 * 1) Disabled Write Protect
+	 *    W(addr=0x00, WP_DISABLE_CODE)
+	 * 2) Read Calibration code and adjust
+	 *    R(addr=0x26) - adjust value
+	 * 3) Enabled Manual Calibration
+	 *    W(addr=0x22, manual mode | Calibration code)
+	 * 4) Set Offset value to TMPPORT3 Reg
+	 */
+	sd_scc_tmpport_write32(host, priv, 0x00,
+			       SH_MOBILE_SDHI_SCC_TMPPORT_DISABLE_WP_CODE);
+	calib_code = sd_scc_tmpport_read32(host, priv, 0x26);
+	calib_code &= SH_MOBILE_SDHI_SCC_TMPPORT_CALIB_CODE_MASK;
+	if (calib_code > priv->adjust_hs400_calibrate)
+		calib_code -= priv->adjust_hs400_calibrate;
+	else
+		calib_code = 0;
+	sd_scc_tmpport_write32(host, priv, 0x22,
+			       SH_MOBILE_SDHI_SCC_TMPPORT_MANUAL_MODE |
+			       calib_code);
+	sd_scc_write32(host, priv, SH_MOBILE_SDHI_SCC_TMPPORT3,
+		       priv->adjust_hs400_offset);
+
+	/* Clear flag */
+	host->needs_adjust_hs400 = false;
+}
+
+static void renesas_sdhi_adjust_hs400_mode_disable(struct mmc_host *mmc)
+{
+	struct tmio_mmc_host *host = mmc_priv(mmc);
+	struct renesas_sdhi *priv = host_to_priv(host);
+
+	/* Disabled Manual adjust HS400 mode
+	 *
+	 * 1) Disabled Write Protect
+	 *    W(addr=0x00, WP_DISABLE_CODE)
+	 * 2) Disabled Manual Calibration
+	 *    W(addr=0x22, 0)
+	 * 3) Clear offset value to TMPPORT3 Reg
+	 */
+	sd_scc_tmpport_write32(host, priv, 0x00,
+			       SH_MOBILE_SDHI_SCC_TMPPORT_DISABLE_WP_CODE);
+	sd_scc_tmpport_write32(host, priv, 0x22, 0);
+	sd_scc_write32(host, priv, SH_MOBILE_SDHI_SCC_TMPPORT3, 0);
+}
 #define SH_MOBILE_SDHI_MAX_TAP 3
 
 static int renesas_sdhi_select_tuning(struct tmio_mmc_host *host)
@@ -389,6 +502,9 @@ static int renesas_sdhi_select_tuning(struct tmio_mmc_host *host)
 	unsigned long ntap;     /* temporary counter of tuning success */
 	unsigned long i;
 
+	/* clear flag */
+	host->needs_adjust_hs400 = false;
+
 	/* Clear SCC_RVSREQ */
 	sd_scc_write32(host, priv, SH_MOBILE_SDHI_SCC_RVSREQ, 0);
 
@@ -480,6 +596,10 @@ static void renesas_sdhi_hw_reset(struct tmio_mmc_host *host)
 	renesas_sdhi_reset_scc(host, priv);
 	renesas_sdhi_reset_hs400_mode(host, priv);
 
+	/* Disaled adjust HS400 mode */
+	if (host->adjust_hs400_mode_disable)
+		host->adjust_hs400_mode_disable(host->mmc);
+
 	sd_ctrl_write16(host, CTL_SD_CARD_CLK_CTL, CLK_CTL_SCLKEN |
 			sd_ctrl_read16(host, CTL_SD_CARD_CLK_CTL));
 
@@ -564,12 +684,54 @@ static const struct renesas_sdhi_quirks sdhi_quirks_4tap = {
 	.hs400_4taps = true,
 };
 
+static const struct renesas_sdhi_quirks sdhi_quirks_4tap_nohs400_bit17 = {
+	.hs400_disabled = true,
+	.hs400_4taps = true,
+	.dtranend1_bit17 = true,
+};
+
+static const struct renesas_sdhi_quirks sdhi_quirks_4tap_nohs400 = {
+	.hs400_disabled = true,
+	.hs400_4taps = true,
+};
+
+static const struct renesas_sdhi_quirks sdhi_quirks_r8a7796_rev1 = {
+	.hs400_4taps = true,
+	.hs400_manual_calib = true,
+	.hs400_offset = SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_0,
+	.hs400_calib = 0x9,
+};
+
+static const struct renesas_sdhi_quirks sdhi_quirks_r8a77965 = {
+	.hs400_manual_calib = true,
+	.hs400_offset = SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_0,
+	.hs400_calib = 0x0,
+};
+
+static const struct renesas_sdhi_quirks sdhi_quirks_r8a77990 = {
+	.hs400_manual_calib = true,
+	.hs400_offset = SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_0,
+	.hs400_calib = 0x4,
+};
+
 static const struct soc_device_attribute sdhi_quirks_match[]  = {
 	{ .soc_id = "r8a774a1", .revision = "ES1.*",
-				.data = &sdhi_quirks_4tap },
+	  .data = &sdhi_quirks_r8a7796_rev1, },
 	{ .soc_id = "r8a774e1", .data = &sdhi_quirks_4tap },
-	{ .soc_id = "r8a7795",  .data = &sdhi_quirks_4tap },
-	{ .soc_id = "r8a7796",  .data = &sdhi_quirks_4tap },
+	{ .soc_id = "r8a7795", .revision = "ES1.*",
+	  .data = &sdhi_quirks_4tap_nohs400_bit17, },
+	{ .soc_id = "r8a7795", .revision = "ES2.0",
+	  .data = &sdhi_quirks_4tap, },
+	{ .soc_id = "r8a7796", .revision = "ES1.0",
+	  .data = &sdhi_quirks_4tap_nohs400_bit17, },
+	{ .soc_id = "r8a7796", .revision = "ES1.1",
+	  .data = &sdhi_quirks_4tap_nohs400, },
+	{ .soc_id = "r8a7796", .revision = "ES1.*",
+	  .data = &sdhi_quirks_r8a7796_rev1, },
+	{ .soc_id = "r8a77965",
+	  .data = &sdhi_quirks_r8a77965, },
+	{ .soc_id = "r8a77990",
+	  .data = &sdhi_quirks_r8a77990, },
 	{ /* sentinel */ }
 };
 
@@ -587,6 +749,8 @@ int renesas_sdhi_probe(struct platform_device *pdev,
 	struct resource *res;
 	int irq, ret, i;
 	u16 ver;
+	const struct device_node *np = pdev->dev.of_node;
+	u32 value;
 
 	of_data = of_device_get_match_data(&pdev->dev);
 
@@ -641,6 +805,9 @@ int renesas_sdhi_probe(struct platform_device *pdev,
 	if (IS_ERR(host))
 		return PTR_ERR(host);
 
+	priv->dtranend1_bit17 =
+		(quirks && quirks->dtranend1_bit17) ? true : false;
+
 	if (of_data) {
 		mmc_data->flags |= of_data->tmio_flags;
 		mmc_data->ocr_mask = of_data->tmio_ocr_mask;
@@ -659,6 +826,7 @@ int renesas_sdhi_probe(struct platform_device *pdev,
 	host->clk_disable	= renesas_sdhi_clk_disable;
 	host->multi_io_quirk	= renesas_sdhi_multi_io_quirk;
 	host->dma_ops		= dma_ops;
+	host->needs_adjust_hs400 = false;
 
 	/* For some SoC, we disable internal WP. GPIO may override this */
 	if (mmc_can_gpio_ro(host->mmc))
@@ -679,6 +847,58 @@ int renesas_sdhi_probe(struct platform_device *pdev,
 		}
 	}
 
+	/* Adjust HS400 mode */
+	priv->adjust_hs400_offset = 0;
+	priv->adjust_hs400_calibrate = 0;
+
+	if (np && !of_property_read_u32(np, "adjust_hs400_offset", &value)) {
+		/* DeviceTree can invalidate SoC attribute for HS400 */
+		switch (value) {
+		case 0:
+			priv->adjust_hs400_offset =
+				SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_0;
+			break;
+		case 1:
+			priv->adjust_hs400_offset =
+				SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_1;
+			break;
+		case 2:
+			priv->adjust_hs400_offset =
+				SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_2;
+			break;
+		case 3:
+			priv->adjust_hs400_offset =
+				SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_3;
+			break;
+		default:
+			priv->adjust_hs400_offset =
+				SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_3;
+			dev_warn(&host->pdev->dev, "Unknown adjust hs400 offset\n");
+		}
+		if (!of_property_read_u32(np, "adjust_hs400_calibrate", &value))
+			priv->adjust_hs400_calibrate = value;
+		host->adjust_hs400_mode_enable =
+			renesas_sdhi_adjust_hs400_mode_enable;
+		host->adjust_hs400_mode_disable =
+			renesas_sdhi_adjust_hs400_mode_disable;
+	} else if (host->mmc->caps2 & MMC_CAP2_HS400) {
+		if (quirks && quirks->hs400_disabled) {
+			host->mmc->caps2 &=
+				~(MMC_CAP2_HS400 | MMC_CAP2_HS400_ES);
+		} else if (quirks && quirks->hs400_manual_calib) {
+			priv->adjust_hs400_offset =
+				quirks->hs400_offset &
+				SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_MASK;
+			priv->adjust_hs400_calibrate =
+				quirks->hs400_calib &
+				SH_MOBILE_SDHI_SCC_TMPPORT_CALIB_CODE_MASK;
+			host->adjust_hs400_mode_enable =
+				renesas_sdhi_adjust_hs400_mode_enable;
+			host->adjust_hs400_mode_disable =
+				renesas_sdhi_adjust_hs400_mode_disable;
+		}
+	}
+
 	/* Orginally registers were 16 bit apart, could be 32 or 64 nowadays */
 	if (!host->bus_shift && resource_size(res) > 0x100) /* old way to determine the shift */
 		host->bus_shift = 1;
diff --git a/drivers/mmc/host/tmio_mmc.h b/drivers/mmc/host/tmio_mmc.h
index e2aef31..47fc8fb 100644
--- a/drivers/mmc/host/tmio_mmc.h
+++ b/drivers/mmc/host/tmio_mmc.h
@@ -112,13 +112,6 @@
 
 #define TMIO_MAX_BLK_SIZE 512
 
-/* Check LSI revisions and set specific quirk value */
-#define FORCE_HS200		BIT(2)
-#define HS400_USE_MANUAL_CALIB  BIT(3)
-/* bit[31:16] reserved for HS400 manual calibration */
-#define HS400_CALIB_MASK	GENMASK_ULL(23, 16)
-#define HS400_OFFSET_MASK	GENMASK_ULL(31, 24)
-
 struct tmio_mmc_data;
 struct tmio_mmc_host;
 
-- 
2.7.4

