From 83ce36faaf9fb33cb67f9fb01f535498c829681d Mon Sep 17 00:00:00 2001
From: Hien Huynh <hien.huynh.px@renesas.com>
Date: Thu, 19 Sep 2019 11:30:43 +0700
Subject: [PATCH 135/443] media: rcar-vin: Add UDS function support

Add UDS (Up Down Scale) control for R-Car Gen3.
UDS can be vertical and horizontal scaling.

There is a possibility that scaling may not be executed
when VUP bit in VnMC register is active and UDS relation registers
can be not set. Therefore, Add processing to set VUP bit to 0 at
the capture stop.

In addition, before stopping the capture, if UDS (Up Down Scale) is set
to disable and waiting for the capture completion, capture data invades
to the area beyond the area allocated by dma_alloc function.
Since it was obtained by the view of the H/W team that it is better to
disable UDS after stopping the capture.

Apply this patch support for RZ/G2 SoC too.

Signed-off-by: Koji Matsuoka <koji.matsuoka.xm@renesas.com>
(cherry pick commit 803f2c8ccae6b52f0dbcb5428d996774d184d935)
from repository horms/renesas-bsp
Signed-off-by: Hien Huynh <hien.huynh.px@renesas.com>
---
 drivers/media/platform/rcar-vin/rcar-dma.c  | 114 ++++++++++++++++++++++++++--
 drivers/media/platform/rcar-vin/rcar-v4l2.c |   5 +-
 drivers/media/platform/rcar-vin/rcar-vin.h  |  14 ++++
 3 files changed, 127 insertions(+), 6 deletions(-)

diff --git a/drivers/media/platform/rcar-vin/rcar-dma.c b/drivers/media/platform/rcar-vin/rcar-dma.c
index bbb0d89..fb78670 100644
--- a/drivers/media/platform/rcar-vin/rcar-dma.c
+++ b/drivers/media/platform/rcar-vin/rcar-dma.c
@@ -39,6 +39,11 @@
 #define VNDMR_REG	0x58	/* Video n Data Mode Register */
 #define VNDMR2_REG	0x5C	/* Video n Data Mode Register 2 */
 #define VNUVAOF_REG	0x60	/* Video n UV Address Offset Register */
+#define VNUDS_CTRL_REG		0x80	/* Scaling Control Registers */
+#define VNUDS_SCALE_REG		0x84	/* Scaling Factor Register */
+#define VNUDS_PASS_BWIDTH_REG	0x90	/* Passband Registers */
+#define VNUDS_IPC_REG		0x98	/* 2D IPC Setting Register */
+#define VNUDS_CLIP_SIZE_REG	0xA4	/* UDS Output Size Clipping Register */
 
 /* Register offsets specific for Gen2 */
 #define VNSLPOC_REG	0x1C	/* Video n Start Line Post-Clip Register */
@@ -138,6 +143,10 @@ struct rvin_buffer {
 					       struct rvin_buffer, \
 					       vb)->list)
 
+/* Video n UDS Control Register bits */
+#define VNUDS_CTRL_AMD		(1 << 30)
+#define VNUDS_CTRL_BC		(1 << 20)
+
 static void rvin_write(struct rvin_dev *vin, u32 value, u32 offset)
 {
 	iowrite32(value, vin->base + offset);
@@ -572,6 +581,74 @@ static void rvin_crop_scale_comp_gen2(struct rvin_dev *vin)
 		0, 0);
 }
 
+static unsigned long rvin_get_bwidth(unsigned long ratio)
+{
+	unsigned long bwidth;
+	unsigned long mant, frac;
+
+	mant = (ratio & 0xF000) >> 12;
+	frac = ratio & 0x0FFF;
+	if (mant)
+		bwidth = 64 * 4096 * mant / (4096 * mant + frac);
+	else
+		bwidth = 64;
+
+	return bwidth;
+}
+
+static unsigned long rvin_compute_ratio(unsigned int input,
+					unsigned int output)
+{
+	return ((input * 4096 / output) == 0x10000) ?
+		0xFFFF : (input * 4096 / output);
+}
+
+static int rvin_crop_scale_comp_gen3(struct rvin_dev *vin)
+{
+	struct rvin_uds_regs regs;
+	unsigned long ratio_h, ratio_v;
+	unsigned long bwidth_h, bwidth_v;
+	unsigned long ctrl;
+	unsigned long clip_size;
+	u32 vnmc;
+
+	ratio_h = rvin_compute_ratio(vin->crop.width, vin->format.width);
+	ratio_v = rvin_compute_ratio(vin->crop.height, vin->format.height);
+
+	if (ratio_h > 0x10000 || ratio_v > 0x10000)
+		dev_warn(vin->dev, "Scaling rate parameter error\n");
+
+	bwidth_h = rvin_get_bwidth(ratio_h);
+	bwidth_v = rvin_get_bwidth(ratio_v);
+
+	ctrl = VNUDS_CTRL_AMD;
+
+	if (vin->format.field == V4L2_FIELD_NONE)
+		clip_size = (vin->format.width << 16) | (vin->format.height);
+	else
+		clip_size = (vin->format.width << 16) |
+				(vin->format.height / 2);
+
+	regs.ctrl = ctrl;
+	regs.scale = (ratio_h << 16) | ratio_v;
+	regs.pass_bwidth = (bwidth_h << 16) | bwidth_v;
+	regs.clip_size = clip_size;
+
+	vnmc = rvin_read(vin, VNMC_REG);
+	rvin_write(vin, vnmc | VNMC_SCLE, VNMC_REG);
+	rvin_write(vin, regs.ctrl, VNUDS_CTRL_REG);
+	rvin_write(vin, regs.scale, VNUDS_SCALE_REG);
+	rvin_write(vin, regs.pass_bwidth, VNUDS_PASS_BWIDTH_REG);
+	rvin_write(vin, regs.clip_size, VNUDS_CLIP_SIZE_REG);
+	rvin_write(vin, vnmc, VNMC_REG);
+
+	vin_dbg(vin, "Pre-Clip: %ux%u@%u:%u Post-Clip: %ux%u@%u:%u\n",
+		vin->crop.width, vin->crop.height, vin->crop.left,
+		vin->crop.top, vin->format.width, vin->format.height, 0, 0);
+
+	return 0;
+}
+
 void rvin_crop_scale_comp(struct rvin_dev *vin)
 {
 	/* Set Start/End Pixel/Line Pre-Clip */
@@ -596,6 +673,8 @@ void rvin_crop_scale_comp(struct rvin_dev *vin)
 	/* TODO: Add support for the UDS scaler. */
 	if (vin->info->model != RCAR_GEN3)
 		rvin_crop_scale_comp_gen2(vin);
+	else
+		rvin_crop_scale_comp_gen3(vin);
 
 	if (vin->format.pixelformat == V4L2_PIX_FMT_NV16)
 		rvin_write(vin, ALIGN(vin->format.width, 0x20), VNIS_REG);
@@ -603,6 +682,17 @@ void rvin_crop_scale_comp(struct rvin_dev *vin)
 		rvin_write(vin, ALIGN(vin->format.width, 0x10), VNIS_REG);
 }
 
+static bool rvin_is_scaling(struct rvin_dev *vin)
+{
+	if (vin->info->model == RCAR_GEN3) {
+		if (vin->crop.width != vin->compose.width ||
+		    vin->crop.height != vin->compose.height)
+			return true;
+	}
+
+	return false;
+}
+
 /* -----------------------------------------------------------------------------
  * Hardware setup
  */
@@ -751,6 +841,9 @@ static int rvin_setup(struct rvin_dev *vin)
 			vnmc |= VNMC_DPINE;
 	}
 
+	if (rvin_is_scaling(vin))
+		vnmc |= VNMC_SCLE;
+
 	/* Progressive or interlaced mode */
 	interrupts = progressive ? VNIE_FIE : VNIE_EFE;
 
@@ -788,6 +881,11 @@ static bool rvin_capture_active(struct rvin_dev *vin)
 	return rvin_read(vin, VNMS_REG) & VNMS_CA;
 }
 
+static void rvin_disable_uds(struct rvin_dev *vin)
+{
+	rvin_write(vin, rvin_read(vin, VNMC_REG) & ~VNMC_SCLE, VNMC_REG);
+}
+
 static void rvin_set_slot_addr(struct rvin_dev *vin, int slot, dma_addr_t addr)
 {
 	const struct rvin_video_format *fmt;
@@ -877,6 +975,13 @@ static void rvin_capture_stop(struct rvin_dev *vin)
 	/* Set continuous & single transfer off */
 	rvin_write(vin, 0, VNFC_REG);
 
+	if (vin->info->model == RCAR_GEN3) {
+		u32 vnmc;
+
+		vnmc = rvin_read(vin, VNMC_REG);
+		rvin_write(vin, vnmc & ~VNMC_VUP, VNMC_REG);
+	}
+
 	/* Disable module */
 	rvin_write(vin, rvin_read(vin, VNMC_REG) & ~VNMC_ME, VNMC_REG);
 }
@@ -1081,11 +1186,6 @@ static int rvin_mc_validate_format(struct rvin_dev *vin, struct v4l2_subdev *sd,
 		return -EPIPE;
 	}
 
-	if (fmt.format.width != vin->format.width ||
-	    fmt.format.height != vin->format.height ||
-	    fmt.format.code != vin->mbus_code)
-		return -EPIPE;
-
 	return 0;
 }
 
@@ -1230,6 +1330,10 @@ static void rvin_stop_streaming(struct vb2_queue *vq)
 
 	rvin_set_stream(vin, 0);
 
+	/* disable UDS */
+	if (vin->info->model == RCAR_GEN3)
+		rvin_disable_uds(vin);
+
 	/* disable interrupts */
 	rvin_disable_interrupts(vin);
 
diff --git a/drivers/media/platform/rcar-vin/rcar-v4l2.c b/drivers/media/platform/rcar-vin/rcar-v4l2.c
index 1236e6e..5ded752 100644
--- a/drivers/media/platform/rcar-vin/rcar-v4l2.c
+++ b/drivers/media/platform/rcar-vin/rcar-v4l2.c
@@ -695,6 +695,10 @@ static int rvin_mc_s_fmt_vid_cap(struct file *file, void *priv,
 	if (vb2_is_busy(&vin->queue))
 		return -EBUSY;
 
+	vin->compose.top = vin->compose.left = 0;
+	vin->compose.width = f->fmt.pix.width;
+	vin->compose.height = f->fmt.pix.height;
+
 	rvin_mc_try_format(vin, &f->fmt.pix);
 
 	vin->format = f->fmt.pix;
@@ -703,7 +707,6 @@ static int rvin_mc_s_fmt_vid_cap(struct file *file, void *priv,
 	vin->crop.left = 0;
 	vin->crop.width = vin->format.width;
 	vin->crop.height = vin->format.height;
-	vin->compose = vin->crop;
 
 	return 0;
 }
diff --git a/drivers/media/platform/rcar-vin/rcar-vin.h b/drivers/media/platform/rcar-vin/rcar-vin.h
index 0b13b34..c597f2b 100644
--- a/drivers/media/platform/rcar-vin/rcar-vin.h
+++ b/drivers/media/platform/rcar-vin/rcar-vin.h
@@ -92,6 +92,20 @@ struct rvin_parallel_entity {
 };
 
 /**
+ * struct rvin_uds_regs - UDS register information
+ * @ctrl:              UDS Control register
+ * @scale:             UDS Scaling Factor register
+ * @pass_bwidth:       UDS Passband Register
+ * @clip_size:         UDS Output Size Clipping Register
+ */
+struct rvin_uds_regs {
+	unsigned long ctrl;
+	unsigned long scale;
+	unsigned long pass_bwidth;
+	unsigned long clip_size;
+};
+
+/**
  * struct rvin_group_route - describes a route from a channel of a
  *	CSI-2 receiver to a VIN
  *
-- 
2.7.4

