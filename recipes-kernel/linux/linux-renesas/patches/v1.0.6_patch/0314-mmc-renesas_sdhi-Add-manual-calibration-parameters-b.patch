From 306cfe91f8e54de6eb34a470418d5f06ab6d811b Mon Sep 17 00:00:00 2001
From: Takeshi Saito <takeshi.saito.xv@renesas.com>
Date: Thu, 11 Jun 2020 15:11:47 +0700
Subject: [PATCH 314/443] mmc: renesas_sdhi: Add manual calibration parameters
 by devicetree

The manual calibration parameters can be customized by devicetree.

- hs400_auto_calib: Force auto calibration mode.
- adjust_hs400_offset: use user-defined manual calibration offset.
- adjust_hs400_calibrate: use user-defined manual calibration table.

Reference path:
- Repository: https://github.com/renesas-rcar/linux-bsp
- Branch: v4.14.75-ltsi/rcar-3.9.8
- Commit: <59ccbcefaebb4a33110e11fb87f3811cd59f192d>

Signed-off-by: Takeshi Saito <takeshi.saito.xv@renesas.com>
Signed-off-by: Loc Vu <loc.vu.zn@renesas.com>
---
 .../devicetree/bindings/mmc/renesas,mmcif.txt      | 27 +++++++++++-
 drivers/mmc/host/renesas_sdhi_core.c               | 48 +++++++++++++++++++++-
 2 files changed, 73 insertions(+), 2 deletions(-)

diff --git a/Documentation/devicetree/bindings/mmc/renesas,mmcif.txt b/Documentation/devicetree/bindings/mmc/renesas,mmcif.txt
index 5ff1e12..81417dc 100644
--- a/Documentation/devicetree/bindings/mmc/renesas,mmcif.txt
+++ b/Documentation/devicetree/bindings/mmc/renesas,mmcif.txt
@@ -35,7 +35,9 @@ Required properties:
   receive DMA channel.
 - max-frequency: Maximum operating clock frequency, driver uses default clock
   frequency if it is not set.
-
+- hs400_auto_calib: Force auto calibration mode.
+- adjust_hs400_offset: use the user-defined manual calibration offset.
+- adjust_hs400_calibrate: use the user-defined manual calibration table.
 
 Example: R8A7790 (R-Car H2) MMCIF0
 
@@ -48,3 +50,26 @@ Example: R8A7790 (R-Car H2) MMCIF0
 		dma-names = "tx", "rx";
 		max-frequency = <97500000>;
 	};
+
+Example: R8A7795 (R-Car H3) SDHI2
+
+	&sdhi2 {
+		/* used for on-board 8bit eMMC */
+		pinctrl-0 = <&sdhi2_pins>;
+		pinctrl-1 = <&sdhi2_pins_uhs>;
+		pinctrl-names = "default", "state_uhs";
+		iommus = <&ipmmu_ds1 34>;
+		vmmc-supply = <&reg_3p3v>;
+		vqmmc-supply = <&reg_1p8v>;
+		bus-width = <8>;
+		mmc-hs200-1_8v;
+		mmc-hs400-1_8v;
+		adjust_hs400_offset = <3>;
+		adjust_hs400_calibrate = <0  1  2  3  4  5  6  7  8  9
+					  10 11 12 13 14 15 16 17 18 19
+					  20 21 22 23 24 25 26 27 28 29
+					  30 31>;
+		non-removable;
+		fixed-emmc-driver-type = <1>;
+		status = "okay";
+	};
diff --git a/drivers/mmc/host/renesas_sdhi_core.c b/drivers/mmc/host/renesas_sdhi_core.c
index 3a2d08b..d58b69a 100644
--- a/drivers/mmc/host/renesas_sdhi_core.c
+++ b/drivers/mmc/host/renesas_sdhi_core.c
@@ -291,6 +291,8 @@ static const u32 r8a77990_calib_table[2][CALIB_TABLE_MAX] = {
 	 12, 13, 14, 16, 17, 18, 18, 18, 19, 19, 20, 24, 26, 26, 26, 26 }
 };
 
+static u32 custom_calib_table[2][CALIB_TABLE_MAX];
+
 static inline u32 sd_scc_read32(struct tmio_mmc_host *host,
 				struct renesas_sdhi *priv, int addr)
 {
@@ -791,12 +793,14 @@ int renesas_sdhi_probe(struct platform_device *pdev,
 	const struct renesas_sdhi_quirks *quirks = NULL;
 	const struct renesas_sdhi_of_data *of_data;
 	const struct soc_device_attribute *attr;
+	const struct device_node *np = pdev->dev.of_node;
 	struct tmio_mmc_data *mmc_data;
 	struct tmio_mmc_dma *dma_priv;
 	struct tmio_mmc_host *host;
 	struct renesas_sdhi *priv;
 	struct resource *res;
 	int irq, ret, i;
+	u32 value;
 	u16 ver;
 	int port_num_offset = 0;
 
@@ -901,7 +905,43 @@ int renesas_sdhi_probe(struct platform_device *pdev,
 	priv->adjust_hs400_offset = 0;
 	priv->adjust_hs400_calib_table = NULL;
 
-	if (host->mmc->caps2 & MMC_CAP2_HS400) {
+	if ((host->mmc->caps2 & MMC_CAP2_HS400) && np &&
+	     !of_property_read_u32(np, "adjust_hs400_offset", &value) &&
+	     !of_property_read_u32_array(np, "adjust_hs400_calibrate",
+					 custom_calib_table[0] +
+					 port_num_offset,
+					 CALIB_TABLE_MAX)) {
+		/* DeviceTree can invalidate SoC attribute for HS400 */
+		switch (value) {
+		case 0:
+			priv->adjust_hs400_offset =
+				SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_0;
+			break;
+		case 1:
+			priv->adjust_hs400_offset =
+				SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_1;
+			break;
+		case 2:
+			priv->adjust_hs400_offset =
+				SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_2;
+			break;
+		case 3:
+			priv->adjust_hs400_offset =
+				SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_3;
+			break;
+		default:
+			priv->adjust_hs400_offset =
+				SH_MOBILE_SDHI_SCC_TMPPORT3_OFFSET_3;
+			dev_warn(&host->pdev->dev, "Unknown adjust hs400 offset\n");
+		}
+
+		priv->adjust_hs400_calib_table =
+			custom_calib_table[0] + port_num_offset;
+		host->adjust_hs400_mode_enable =
+			renesas_sdhi_adjust_hs400_mode_enable;
+		host->adjust_hs400_mode_disable =
+			renesas_sdhi_adjust_hs400_mode_disable;
+	} else if (host->mmc->caps2 & MMC_CAP2_HS400) {
 		if (quirks && quirks->hs400_disabled) {
 			host->mmc->caps2 &=
 				~(MMC_CAP2_HS400 | MMC_CAP2_HS400_ES);
@@ -918,6 +958,12 @@ int renesas_sdhi_probe(struct platform_device *pdev,
 		}
 	}
 
+	if (np && of_get_property(np, "hs400_auto_calib", NULL)) {
+		/* Force auto calibration */
+		host->adjust_hs400_mode_enable = NULL;
+		host->adjust_hs400_mode_disable = NULL;
+	}
+
 	/* Orginally registers were 16 bit apart, could be 32 or 64 nowadays */
 	if (!host->bus_shift && resource_size(res) > 0x100) /* old way to determine the shift */
 		host->bus_shift = 1;
-- 
2.7.4

