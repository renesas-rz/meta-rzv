From 12685d40568a95f34bf87147e5442e0c825fa7d6 Mon Sep 17 00:00:00 2001
From: cuongdoan <cuong.doan.ra@renesas.com>
Date: Tue, 6 Jul 2021 09:00:19 +0700
Subject: [PATCH] Modify-vspmfilter-for-deinterlace

---
 gstvspmfilter.c | 309 +++++++++++++++++-------------------------------
 gstvspmfilter.h |   9 +-
 2 files changed, 115 insertions(+), 203 deletions(-)

diff --git a/gstvspmfilter.c b/gstvspmfilter.c
index b013107..c0dacc4 100644
--- a/gstvspmfilter.c
+++ b/gstvspmfilter.c
@@ -3,7 +3,7 @@
  * This file:
  * Copyright (C) 2003 Ronald Bultje <rbultje@ronald.bitfreak.net>
  * Copyright (C) 2010 David Schleef <ds@schleef.org>
- * Copyright (C) 2014 Renesas Corporation
+ * Copyright (C) 2014-2020 Renesas Electronics Corporation
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Library General Public
@@ -64,8 +64,8 @@ GType gst_vspm_filter_get_type (void);
 
 static GQuark _colorspace_quark;
 
-volatile unsigned char end_flag = 0;  /* wait vspm-callback flag */
-
+volatile unsigned char frame_idx = 1;
+gboolean deinterlace_flag = FALSE;
 #define gst_vspm_filter_parent_class parent_class
 G_DEFINE_TYPE (GstVspmFilter, gst_vspm_filter, GST_TYPE_VIDEO_FILTER);
 G_DEFINE_TYPE (GstVspmFilterBufferPool, gst_vspmfilter_buffer_pool, GST_TYPE_BUFFER_POOL);
@@ -132,7 +132,8 @@ enum
 {
   PROP_0,
   PROP_VSPM_OUTBUF,
-  PROP_VSPM_DMABUF
+  PROP_VSPM_DMABUF,
+  PROP_VSPM_DEINTERLACE
 };
 
 static gboolean
@@ -162,7 +163,8 @@ gst_vspmfilter_buffer_pool_set_config (GstBufferPool * pool, GstStructure * conf
 
   width = GST_VIDEO_INFO_WIDTH (&info);
   height = GST_VIDEO_INFO_HEIGHT (&info);
-
+  GST_DEBUG("width is %d, height is %d\n", width, height);
+  
   for (i=0; i < GST_VIDEO_FORMAT_INFO_N_PLANES(info.finfo); i++) {
     stride[i] = GST_VIDEO_FORMAT_INFO_PSTRIDE(info.finfo, i) *
                   GST_VIDEO_FORMAT_INFO_SCALE_WIDTH (info.finfo, i, width);
@@ -413,21 +415,22 @@ struct extensions_t
 
 /* Note that below swap information will be REVERSED later (in function
  *     set_colorspace) because current system use Little Endian */
+
 static const struct extensions_t exts[] = {
   {GST_VIDEO_FORMAT_NV12,  VSP_IN_YUV420_SEMI_NV12,  VSP_SWAP_NO},    /* NV12 format is highest priority as most modules support this */
   {GST_VIDEO_FORMAT_I420,  VSP_IN_YUV420_PLANAR,     VSP_SWAP_NO},    /* I420 is second priority */
   {GST_VIDEO_FORMAT_YUY2,  VSP_IN_YUV422_INT0_YUY2,  VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_UYVY,  VSP_IN_YUV422_INT0_UYVY,  VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_RGBx,  VSP_IN_RGBA8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_BGRx,  VSP_IN_ARGB8888,          VSP_SWAP_B | VSP_SWAP_W},  /* Not supported in VSP. Use ARGB8888, and swap ARGB -> RABG -> BGRA */
-  {GST_VIDEO_FORMAT_xRGB,  VSP_IN_ARGB8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_xBGR,  VSP_IN_ABGR8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_RGBA,  VSP_IN_RGBA8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_BGRA,  VSP_IN_ARGB8888,          VSP_SWAP_B | VSP_SWAP_W},  /* Same as BGRA */
-  {GST_VIDEO_FORMAT_ARGB,  VSP_IN_ARGB8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_ABGR,  VSP_IN_ABGR8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_RGB ,  VSP_IN_RGB888,            VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_BGR ,  VSP_IN_BGR888,            VSP_SWAP_NO},
+  {GST_VIDEO_FORMAT_UYVY,  ISU_YUV422_UYVY,  VSP_SWAP_NO},
+  {GST_VIDEO_FORMAT_RGBx,  ISU_RGBA8888,          VSP_SWAP_NO},
+  {GST_VIDEO_FORMAT_BGRx,  ISU_ARGB8888,          VSP_SWAP_B | VSP_SWAP_W},  /* Not supported in VSP. Use ARGB8888, and swap ARGB -> RABG -> BGRA */
+  {GST_VIDEO_FORMAT_xRGB,  ISU_ARGB8888,          VSP_SWAP_NO},
+  {GST_VIDEO_FORMAT_xBGR,  ISU_ABGR8888,          VSP_SWAP_NO},
+  {GST_VIDEO_FORMAT_RGBA,  ISU_RGBA8888,          VSP_SWAP_NO},
+  {GST_VIDEO_FORMAT_BGRA,  ISU_ARGB8888,          VSP_SWAP_B | VSP_SWAP_W},  /* Same as BGRA */
+  {GST_VIDEO_FORMAT_ARGB,  ISU_ARGB8888,          VSP_SWAP_NO},
+  {GST_VIDEO_FORMAT_ABGR,  ISU_ABGR8888,          VSP_SWAP_NO},
+  {GST_VIDEO_FORMAT_RGB ,  ISU_RGB888,            VSP_SWAP_NO},
+  {GST_VIDEO_FORMAT_BGR ,  ISU_BGR888,            VSP_SWAP_NO},
   {GST_VIDEO_FORMAT_YVYU,  VSP_IN_YUV422_INT0_YVYU,  VSP_SWAP_NO},
   {GST_VIDEO_FORMAT_Y444,  VSP_IN_YUV444_PLANAR,     VSP_SWAP_NO},
   {GST_VIDEO_FORMAT_NV21,  VSP_IN_YUV420_SEMI_NV21,  VSP_SWAP_NO},
@@ -437,30 +440,6 @@ static const struct extensions_t exts[] = {
   {GST_VIDEO_FORMAT_NV24,  VSP_IN_YUV444_SEMI_PLANAR,VSP_SWAP_NO},
 };
 
-static const struct extensions_t exts_out[] = {
-  {GST_VIDEO_FORMAT_NV12,  VSP_OUT_YUV420_SEMI_NV12,  VSP_SWAP_NO},    /* NV12 format is highest priority as most modules support this */
-  {GST_VIDEO_FORMAT_I420,  VSP_OUT_YUV420_PLANAR,     VSP_SWAP_NO},    /* I420 is second priority */
-  {GST_VIDEO_FORMAT_YUY2,  VSP_OUT_YUV422_INT0_YUY2,  VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_UYVY,  VSP_OUT_YUV422_INT0_UYVY,  VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_RGBx,  VSP_OUT_RGBP8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_BGRx,  VSP_OUT_PRGB8888,          VSP_SWAP_B | VSP_SWAP_W},  /* Not supported in VSP. Use ARGB8888, and swap ARGB -> RABG -> BGRA */
-  {GST_VIDEO_FORMAT_xRGB,  VSP_OUT_PRGB8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_xBGR,  VSP_OUT_PRGB8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_RGBA,  VSP_OUT_RGBP8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_BGRA,  VSP_OUT_PRGB8888,          VSP_SWAP_B | VSP_SWAP_W},  /* Same as BGRA */
-  {GST_VIDEO_FORMAT_ARGB,  VSP_OUT_PRGB8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_ABGR,  VSP_OUT_PBGR8888,          VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_RGB ,  VSP_OUT_RGB888,            VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_BGR ,  VSP_OUT_BGR888,            VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_YVYU,  VSP_OUT_YUV422_INT0_YVYU,  VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_Y444,  VSP_OUT_YUV444_PLANAR,     VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_NV21,  VSP_OUT_YUV420_SEMI_NV21,  VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_v308,  VSP_OUT_YUV444_INTERLEAVED,VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_RGB16, VSP_OUT_RGB565,            VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_NV16,  VSP_OUT_YUV422_SEMI_NV16,  VSP_SWAP_NO},
-  {GST_VIDEO_FORMAT_NV24,  VSP_OUT_YUV444_SEMI_PLANAR,VSP_SWAP_NO},
-};
-
 static gint
 set_colorspace (GstVideoFormat vid_fmt, guint * format, guint * fswap)
 {
@@ -479,24 +458,6 @@ set_colorspace (GstVideoFormat vid_fmt, guint * format, guint * fswap)
   return -1;
 }
 
-static gint
-set_colorspace_output (GstVideoFormat vid_fmt, guint * format, guint * fswap)
-{
-  int nr_exts = sizeof (exts_out) / sizeof (exts_out[0]);
-  int i;
-
-  for (i = 0; i < nr_exts; i++) {
-    if (vid_fmt == exts_out[i].gst_format) {
-      *format = exts_out[i].vsp_format;
-
-      /* Need to reverse swap information for Little Endian */
-      *fswap  = (VSP_SWAP_B | VSP_SWAP_W | VSP_SWAP_L | VSP_SWAP_LL) ^ exts_out[i].vsp_swap;
-      return 0;
-    }
-  }
-  return -1;
-}
-
 static gboolean
 gst_vspm_filter_set_info (GstVideoFilter * filter,
     GstCaps * incaps, GstVideoInfo * in_info, GstCaps * outcaps,
@@ -507,6 +468,7 @@ gst_vspm_filter_set_info (GstVideoFilter * filter,
   VspmbufArray *vspm_outbuf;
   GstStructure *structure;
   gint i;
+  gint scale_output_stride = 1;
 
   space = GST_VIDEO_CONVERT_CAST (filter);
   vspm_out = space->vspm_out;
@@ -516,10 +478,21 @@ gst_vspm_filter_set_info (GstVideoFilter * filter,
   if (in_info->fps_n != out_info->fps_n || in_info->fps_d != out_info->fps_d)
     goto format_mismatch;
 
-  /* if present, these must match too */
-  if (in_info->interlace_mode != out_info->interlace_mode)
-    goto format_mismatch;
-
+  GST_DEBUG("input interlace mode %d\n",in_info->interlace_mode );
+  GST_DEBUG("output interlace mode %d\n",out_info->interlace_mode );
+  if(out_info->interlace_mode == GST_VIDEO_INTERLACE_MODE_PROGRESSIVE) {
+    if(in_info->interlace_mode == GST_VIDEO_INTERLACE_MODE_ALTERNATE) {
+      deinterlace_flag = TRUE;
+      scale_output_stride = 2; 
+    }
+    else if (in_info->interlace_mode == GST_VIDEO_INTERLACE_MODE_PROGRESSIVE) {
+      deinterlace_flag = FALSE;
+    }
+    else {
+      GST_ERROR("Does not support this interlace mode %d\n",in_info->interlace_mode );
+      return FALSE;
+    }
+  }
   GST_DEBUG ("reconfigured %d %d", GST_VIDEO_INFO_FORMAT (in_info),
       GST_VIDEO_INFO_FORMAT (out_info));
   if(space->outbuf_allocate) {
@@ -545,7 +518,7 @@ gst_vspm_filter_set_info (GstVideoFilter * filter,
 
     for (i = 0; i < n_planes; i++) {
       offset[i] = size;
-      stride[i] = GST_VIDEO_FORMAT_INFO_PSTRIDE(out_info->finfo, i) *
+      stride[i] = scale_output_stride * GST_VIDEO_FORMAT_INFO_PSTRIDE(out_info->finfo, i) *
           GST_VIDEO_FORMAT_INFO_SCALE_WIDTH (out_info->finfo, i,
               out_info->width);
 
@@ -555,7 +528,7 @@ gst_vspm_filter_set_info (GstVideoFilter * filter,
       size += plane_size[i];
     }
 
-    for (i = 0; i < 5; i++){
+    for (i = 0; i < MAX_BUFFER; i++){
       GstBuffer *buf;
       vspm_used = vspm_out->used;
       if (R_MM_OK == mmngr_alloc_in_user(&vspm_out->vspm[vspm_used].mmng_pid,
@@ -646,7 +619,7 @@ gst_vspm_filter_set_info (GstVideoFilter * filter,
     space->out_port_pool = gst_vspmfilter_buffer_pool_new (space);
 
     structure = gst_buffer_pool_get_config (space->out_port_pool);
-    gst_buffer_pool_config_set_params (structure, outcaps, out_info->size, 5, 5);
+    gst_buffer_pool_config_set_params (structure, outcaps, out_info->size, MAX_BUFFER, MAX_BUFFER);
     if (!gst_buffer_pool_set_config (space->out_port_pool, structure)) {
         GST_WARNING_OBJECT (space, "failed to set buffer pool configuration");
     }
@@ -756,10 +729,10 @@ gst_vspm_filter_class_init (GstVspmFilterClass * klass)
     gst_caps_append (incaps, tmpcaps);
   }
 
-  nr_exts = sizeof (exts_out) / sizeof (exts_out[0]);
+  nr_exts = sizeof (exts) / sizeof (exts[0]);
   for (i = 0; i < nr_exts; i++) {
 	tmpcaps = gst_caps_new_simple ("video/x-raw",
-            "format", G_TYPE_STRING, gst_video_format_to_string (exts_out[i].gst_format),
+            "format", G_TYPE_STRING, gst_video_format_to_string (exts[i].gst_format),
             "width", GST_TYPE_INT_RANGE, 1, G_MAXINT,
             "height", GST_TYPE_INT_RANGE, 1, G_MAXINT,
             "framerate", GST_TYPE_FRACTION_RANGE, 0, 1, G_MAXINT, 1, NULL);
@@ -875,7 +848,7 @@ gst_vspm_filter_finalize (GObject * obj)
   /* free space->allocator when finalize */
   if (space->allocator)
     gst_object_unref(space->allocator);
-
+  sem_destroy (&space->smp_wait);
   G_OBJECT_CLASS (parent_class)->finalize (obj);
 }
 
@@ -916,7 +889,7 @@ gst_vspm_filter_init (GstVspmFilter * space)
   if (vsp_info->mmngr_fd == -1) {
     printf("MMNGR: open error. \n");
   }
-  
+
   if (VSPM_lib_DriverInitialize(&vsp_info->vspm_handle) == R_VSPM_OK) {
     vsp_info->is_init_vspm = TRUE;
   } else {
@@ -940,6 +913,8 @@ gst_vspm_filter_init (GstVspmFilter * space)
     for (j = 0; j < GST_VIDEO_MAX_PLANES; j++)
       vspm_out->vspm[i].dmabuf_pid[j] = -1;
   }
+
+  sem_init (&space->smp_wait, 0, 0);
 }
 
 void
@@ -988,10 +963,16 @@ gst_vspm_filter_get_property (GObject * object, guint property_id,
 static void cb_func(
   unsigned long uwJobId, long wResult, unsigned long uwUserData)
 {
+//  printf("DEBUG VP cb_func\n");
+  sem_t *p_smpwait = (sem_t *) uwUserData;
+
   if (wResult != 0) {
     printf("VSPM: error end. (%ld)\n", wResult);
   }
-  end_flag = 1;
+  /* Inform frame finish to transform function */
+  sem_post (p_smpwait);
+  frame_idx++;
+  frame_idx= frame_idx%2;
 }
 
 static GstFlowReturn
@@ -1007,11 +988,13 @@ find_physical_address (GstVspmFilter *space, gpointer in_vir1, gpointer in_vir2,
   p_adr[0].user_virt_addr = (unsigned long)in_vir1;
   p_adr[1].user_virt_addr = (unsigned long)in_vir2;
   ret = ioctl(space->vsp_info->mmngr_fd, MM_IOC_VTOP, &p_adr);
+
   if (ret) {
     printf("MMNGR VtoP Convert Error. \n");
     GST_ERROR ("MMNGR VtoP Convert Error. \n");
     return GST_FLOW_ERROR;
   }
+
   /* Note that this method to find physical address may only find the address at
    * start of page. If there is an offset from page, we need to add it here */
   page_size = getpagesize ();
@@ -1034,19 +1017,19 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
   GstVspmFilterVspInfo *vsp_info;
 
   VSPM_IP_PAR vspm_ip;
-  VSPM_VSP_PAR vsp_par;
+  VSPM_ISU_PAR isu_par;
+
+  T_ISU_IN src_par;
+  T_ISU_ALPHA src_alpha_par;
+  T_ISU_OUT dst_par;
+  T_ISU_RS rs_par;
+
 
-  T_VSP_IN src_par;
-  T_VSP_ALPHA src_alpha_par;
-  T_VSP_OUT dst_par;
-  T_VSP_CTRL ctrl_par;
-  T_VSP_UDS uds_par;
   gint in_width, in_height;
   gint out_width, out_height;
   long ercd;
   gint irc;
-  unsigned long use_module;
-
+  gboolean colorconv_resizer_flag = FALSE;
   int i;
   GstFlowReturn ret;
   gint stride[GST_VIDEO_MAX_PLANES];
@@ -1054,8 +1037,8 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
   gint offs, plane_size;
   const GstVideoFormatInfo * vspm_in_vinfo;
   const GstVideoFormatInfo * vspm_out_vinfo;
-  void *src_addr[3] = { 0 };
-  void *dst_addr[3] = { 0 };
+  void *src_addr[ISU_MAX_PLANES] = { 0 };
+  void *dst_addr[ISU_MAX_PLANES] = { 0 };
   guint in_n_planes, out_n_planes;
 
   space = GST_VIDEO_CONVERT_CAST (filter);
@@ -1065,7 +1048,7 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
       "doing colorspace conversion from %s -> to %s",
       GST_VIDEO_INFO_NAME (&filter->in_info),
       GST_VIDEO_INFO_NAME (&filter->out_info));
-
+ 
   vsp_info->gst_format_in = GST_VIDEO_FRAME_FORMAT (in_frame);
   vsp_info->in_width = GST_VIDEO_FRAME_COMP_WIDTH (in_frame, 0);
   vsp_info->in_height = GST_VIDEO_FRAME_COMP_HEIGHT (in_frame, 0);
@@ -1074,18 +1057,16 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
   vsp_info->out_width = GST_VIDEO_FRAME_COMP_WIDTH (out_frame, 0);
   vsp_info->out_height = GST_VIDEO_FRAME_COMP_HEIGHT (out_frame, 0);
 
-  memset(&ctrl_par, 0, sizeof(T_VSP_CTRL));
-
   if (vsp_info->format_flag == 0) {
     irc = set_colorspace (GST_VIDEO_FRAME_FORMAT (in_frame), &vsp_info->in_format, &vsp_info->in_swapbit);
     if (irc != 0) {
-      printf("input format is non-support.\n");
+      GST_ERROR("input format is non-support.\n");
       return GST_FLOW_ERROR;
     }
 
-    irc = set_colorspace_output (GST_VIDEO_FRAME_FORMAT (out_frame), &vsp_info->out_format, &vsp_info->out_swapbit);
+    irc = set_colorspace (GST_VIDEO_FRAME_FORMAT (out_frame), &vsp_info->out_format, &vsp_info->out_swapbit);
     if (irc != 0) {
-      printf("output format is non-support.\n");
+      GST_ERROR("output format is non-support.\n");
       return GST_FLOW_ERROR;
     }
     vsp_info->format_flag = 1;
@@ -1102,13 +1083,6 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
   in_n_planes = GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_in_vinfo);
   out_n_planes = GST_VIDEO_FORMAT_INFO_N_PLANES(vspm_out_vinfo);
 
-  if ((in_width == out_width) && (in_height == out_height)) {
-    use_module = 0;
-  } else {
-    /* UDS scaling */
-    use_module = VSP_UDS_USE;
-  }
-
   ret = find_physical_address (space, in_frame->data[0], out_frame->data[0],
       &src_addr[0], &dst_addr[0]);
   if (ret != GST_FLOW_OK) return ret;
@@ -1119,141 +1093,74 @@ gst_vspm_filter_transform_frame (GstVideoFilter * filter,
     if (ret != GST_FLOW_OK) return ret;
   }
   if (in_n_planes >= 3 || out_n_planes >= 3) {
-    ret = find_physical_address (space, in_frame->data[2], out_frame->data[2],
-        &src_addr[2], &dst_addr[2]);
-    if (ret != GST_FLOW_OK) return ret;
+    GST_ERROR("does not support number plane >= 3\n");
+    return GST_FLOW_ERROR;
   }
+  rs_par.start_x          = 0;
+  rs_par.start_y          = 0;
+  rs_par.tune_x           = 0;
+  rs_par.tune_y           = 0;
+  rs_par.crop_w           = out_width;
+  rs_par.crop_h           = out_height;
+  rs_par.pad_mode         = 0;
+  rs_par.pad_val          = 0;
+  rs_par.x_ratio          = 0x1000;
+  rs_par.y_ratio          = 0x1000;
 
   {
     /* Setting input parameters */
-    src_alpha_par.addr_a  = NULL;
-    src_alpha_par.alphan  = VSP_ALPHA_NO;
-    src_alpha_par.alpha1  = 0;
-    src_alpha_par.alpha2  = 0;
-    src_alpha_par.astride = 0;
-    src_alpha_par.aswap   = VSP_SWAP_NO;
-    src_alpha_par.asel    = VSP_ALPHA_NUM5;
-    src_alpha_par.aext    = VSP_AEXT_EXPAN;
-    src_alpha_par.anum0   = 0;
-    src_alpha_par.anum1   = 0;
-    src_alpha_par.afix    = 0xff;
-    src_alpha_par.irop    = VSP_IROP_NOP;
-    src_alpha_par.msken   = VSP_MSKEN_ALPHA;
-    src_alpha_par.bsel    = 0;
-    src_alpha_par.mgcolor = 0;
-    src_alpha_par.mscolor0  = 0;
-    src_alpha_par.mscolor1  = 0;
+    src_alpha_par.asel		= 0;    //T.B.D
+    src_alpha_par.anum0		= 0;    //T.B.D
+    src_alpha_par.anum1		= 0;    //T.B.D
+    src_alpha_par.anum2		= 0;    //T.B.D
+    src_alpha_par.athres0	= 0;    //T.B.D
+    src_alpha_par.athres1	= 0;    //T.B.D
+    src_alpha_par.acsc		= 0;    //T.B.D
 
     src_par.addr        = src_addr[0];
-    src_par.addr_c0     = src_addr[1];
-    src_par.addr_c1     = src_addr[2];
+    src_par.addr_c     = src_addr[1];
     src_par.stride      = in_frame->info.stride[0];
     src_par.stride_c    = in_frame->info.stride[1];
-
-    src_par.csc         = VSP_CSC_OFF;  /* do not convert colorspace */
     src_par.width       = in_width;
     src_par.height      = in_height;
-    src_par.width_ex    = 0;
-    src_par.height_ex   = 0;
-    src_par.x_offset    = 0;
-    src_par.y_offset    = 0;
     src_par.format      = vsp_info->in_format;
     src_par.swap        = vsp_info->in_swapbit;
-    src_par.x_position  = 0;
-    src_par.y_position  = 0;
-    src_par.pwd         = VSP_LAYER_PARENT;
-    src_par.cipm        = VSP_CIPM_0_HOLD;
-    src_par.cext        = VSP_CEXT_EXPAN;
-    src_par.iturbt      = VSP_ITURBT_709;
-    src_par.clrcng      = VSP_ITU_COLOR;
-    src_par.vir         = VSP_NO_VIR;
-    src_par.vircolor    = 0x00000000;
-    src_par.osd_lut     = NULL;
-    src_par.alpha_blend = &src_alpha_par;
-    src_par.clrcnv      = NULL;
-    src_par.connect     = use_module;
+    src_par.td          = NULL;
+    src_par.alpha       = &src_alpha_par;
+    src_par.uv_conv 	  = 0;    //T.B.D
   }
 
   {
     /* Setting output parameters */
     dst_par.addr      = dst_addr[0];
-    dst_par.addr_c0   = dst_addr[1];
-    dst_par.addr_c1   = dst_addr[2];
+    dst_par.addr_c    = dst_addr[1];
     dst_par.stride    = out_frame->info.stride[0];
     dst_par.stride_c  = out_frame->info.stride[1];
-
-    /* convert if format in and out different in color space */
-    if (!GST_VIDEO_FORMAT_INFO_IS_YUV(vspm_in_vinfo) != !GST_VIDEO_FORMAT_INFO_IS_YUV(vspm_out_vinfo))
-      dst_par.csc     = VSP_CSC_ON;
-    else dst_par.csc  = VSP_CSC_OFF;
-
-    dst_par.width     = out_width;
-    dst_par.height    = out_height;
-    dst_par.x_offset  = 0;
-    dst_par.y_offset  = 0;
     dst_par.format    = vsp_info->out_format;
-    dst_par.pxa       = VSP_PAD_P;
-    dst_par.pad       = 0xff;
-    dst_par.x_coffset = 0;
-    dst_par.y_coffset = 0;
-    dst_par.iturbt    = VSP_ITURBT_709;
-    dst_par.clrcng    = VSP_ITU_COLOR;
-    dst_par.cbrm      = VSP_CSC_ROUND_DOWN;
-    dst_par.abrm      = VSP_CONVERSION_ROUNDDOWN;
-    dst_par.athres    = 0;
-    dst_par.clmd      = VSP_CLMD_NO;
-    dst_par.dith      = VSP_NO_DITHER;
     dst_par.swap      = vsp_info->out_swapbit;
+    dst_par.csc       = NULL; //T.B.D
+    dst_par.alpha		  = &src_alpha_par;
   }
-
-  if (use_module == VSP_UDS_USE) {
-    /* Set T_VSP_UDS. */
-    ctrl_par.uds     = &uds_par;
-    memset(&uds_par, 0, sizeof(T_VSP_UDS));
-    uds_par.fmd      = VSP_FMD_NO;
-    uds_par.filcolor = 0x0000FF00; /* green */
-	uds_par.amd      = VSP_AMD;
-
-	uds_par.clip		= VSP_CLIP_OFF;
-	uds_par.alpha		= VSP_ALPHA_ON;
-	uds_par.complement	= VSP_COMPLEMENT_BIL;
-	uds_par.athres0		= 0;
-	uds_par.athres1		= 0;
-	uds_par.anum0		= 0;
-	uds_par.anum1		= 0;
-	uds_par.anum2	= 0;
-
-    uds_par.x_ratio     = (unsigned short)( (in_width << 12) / out_width );
-    uds_par.y_ratio     = (unsigned short)( (in_height << 12) / out_height );
-    uds_par.out_cwidth  = (unsigned short)out_width;
-    uds_par.out_cheight = (unsigned short)out_height;
-    uds_par.connect     = 0;
-  }
-
-
-  vsp_par.rpf_num   = 1;
-  vsp_par.use_module  = use_module;
-  vsp_par.src1_par  = &src_par;
-  vsp_par.src2_par  = NULL;
-  vsp_par.src3_par  = NULL;
-  vsp_par.src4_par  = NULL;
-  vsp_par.dst_par   = &dst_par;
-  vsp_par.ctrl_par  = &ctrl_par;
-
+  isu_par.src_par  = &src_par;
+  isu_par.dst_par   = &dst_par;
+  isu_par.rs_par = &rs_par;
+//isu_par.rs_par = NULL;
+//	isu_par.dl_par = NULL;
   memset(&vspm_ip, 0, sizeof(VSPM_IP_PAR));
-  vspm_ip.uhType    = VSPM_TYPE_VSP_AUTO;
-  vspm_ip.unionIpParam.ptVsp = &vsp_par;
+  vspm_ip.uhType    = VSPM_TYPE_ISU_AUTO;
+  vspm_ip.unionIpParam.ptisu = &isu_par;
+
+  ercd = VSPM_lib_Entry(vsp_info->vspm_handle, &vsp_info->jobid, 126, &vspm_ip, (unsigned long)&space->smp_wait, cb_func);
 
-  end_flag = 0;
-  ercd = VSPM_lib_Entry(vsp_info->vspm_handle, &vsp_info->jobid, 126, &vspm_ip, 0, cb_func); 
   if (ercd) {
     printf("VSPM_lib_Entry() Failed!! ercd=%ld\n", ercd);
-    GST_ERROR ("VSPM_lib_Entry() Failed!! ercd=%ld\n", ercd);
     return GST_FLOW_ERROR;
   }
 
-  while(1) {
-    if (end_flag) break;
+  /* Wait for callback */
+  sem_wait (&space->smp_wait);
+  if ((deinterlace_flag == TRUE) && (frame_idx == 0)) {
+    out_frame = NULL;
   }
 
   return GST_FLOW_OK;
@@ -1263,7 +1170,7 @@ static gboolean
 plugin_init (GstPlugin * plugin)
 {
   GST_DEBUG_CATEGORY_INIT (vspmfilter_debug, "vspmfilter", 0,
-      "Colorspace and Video Size Converter");
+      "Colorspace, Video Size Converter and Deinterlace");
 
   _colorspace_quark = g_quark_from_static_string ("colorspace");
 
@@ -1273,5 +1180,5 @@ plugin_init (GstPlugin * plugin)
 
 GST_PLUGIN_DEFINE (GST_VERSION_MAJOR,
     GST_VERSION_MINOR,
-    vspmfilter, "Colorspace conversion and Video scaling with VSPM", plugin_init, VERSION, GST_LICENSE,
+    vspmfilter, "Colorspace conversion, Video scaling and Deinterlace with VSPM", plugin_init, VERSION, GST_LICENSE,
     GST_PACKAGE_NAME, GST_PACKAGE_ORIGIN)
diff --git a/gstvspmfilter.h b/gstvspmfilter.h
index e7c39f6..e9845f6 100644
--- a/gstvspmfilter.h
+++ b/gstvspmfilter.h
@@ -30,6 +30,7 @@
 
 #include <fcntl.h>              /* low-level i/o */
 #include <unistd.h>
+#include <semaphore.h>
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/mman.h>
@@ -57,7 +58,8 @@ G_BEGIN_DECLS
 
 #define MAX_DEVICES 2
 #define MAX_ENTITIES 4
-
+#define MAX_BUFFER 5
+#define ISU_MAX_PLANES 2
 /* mmngr dev name */
 #define DEVFILE "/dev/rgnmm"
 
@@ -146,7 +148,7 @@ typedef struct {
 } Vspm_dmabuff;
 
 typedef struct {
-  Vspm_dmabuff vspm[5];
+  Vspm_dmabuff vspm[MAX_BUFFER];
   int used;
 } Vspm_mmng_ar;
 
@@ -167,11 +169,13 @@ struct _GstVspmFilter {
   GstAllocator *allocator;
   guint use_dmabuf;
   guint outbuf_allocate;
+  guint use_deinterlace;
   GstBufferPool *in_port_pool, *out_port_pool;
   Vspm_mmng_ar *vspm_in;
   Vspm_mmng_ar *vspm_out;
   VspmbufArray *vspm_outbuf;
   gint first_buff;
+  sem_t smp_wait;
 };
 
 struct _GstVspmFilterClass
@@ -184,3 +188,4 @@ GType gst_vspmfilter_buffer_pool_get_type (void);
 G_END_DECLS
 
 #endif /* __GST_VSPMFILTER_H__ */
+
-- 
2.17.1

